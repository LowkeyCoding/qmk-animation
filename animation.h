//**************************************************
//* PLACE THESE VARIABLE DEFS AT BEGINNING OF FILE *
//**************************************************

#define ANIM_SIZE 352
#define IDLE_FRAMES 35
#define ANI_BYTE_SIZE 8
#define COPY_BIT(dest, id, src, is) dest = (( dest & ~(1<<id) ) | ((src & (1<<is))>>is) << id );

//*********************************************
//* Compression ratio: 12.48 to 1             *
//* Estimated PROGMEM Usage: 959 bytes        *
//*********************************************

static const char PROGMEM frame[] = {
	0x2F, 0x17, 0x4B, 0xA5, 0x43, 0x01, 0x02, 0x01, 0x00, 0x81, 0x80, 0x80, 0xC0, 0xC0, 0xC0, 
	0xC0, 0xC0, 0xC0, 0xC0, 0xC0, 0x90, 0x80, 0x81, 0x00, 0x01, 0x02, 0x01, 0x03, 0x05, 0x8B, 
	0x17, 0x2F, 0x00, 0x00, 0x80, 0xE0, 0xF8, 0x9C, 0xC6, 0x66, 0x3F, 0x1B, 0x19, 0x09, 0x1F, 
	0x17, 0x3F, 0x3F, 0x1F, 0x0F, 0x0F, 0x0F, 0x0F, 0x1D, 0xF9, 0xFB, 0xFE, 0x9E, 0x1C, 0xF8, 
	0xE0, 0x80, 0x00, 0x00, 0x00, 0xFC, 0x87, 0x03, 0x01, 0x01, 0x0F, 0x04, 0x80, 0x80, 0x80, 
	0x80, 0x40, 0x30, 0x3F, 0xBE, 0x86, 0xC4, 0xC4, 0xE6, 0xF8, 0xF1, 0xE0, 0xE0, 0xF0, 0xF9, 
	0xAF, 0xCF, 0xFF, 0xFF, 0xFC, 0x00, 0x28, 0x10, 0x07, 0x1E, 0x30, 0x60, 0xC2, 0xC0, 0x82, 
	0x07, 0x01, 0x13, 0x0C, 0x1C, 0x9D, 0xFC, 0xE7, 0x81, 0xC2, 0x83, 0x8F, 0xDF, 0xFF, 0xFF, 
	0x7F, 0xBF, 0x7F, 0x27, 0x1F, 0x07, 0x00, 0x00, 0x50, 0xA0, 0x40, 0x82, 0x00, 0x00, 0x00, 
	0x01, 0x03, 0x03, 0x04, 0x04, 0x45, 0x05, 0x0E, 0x0C, 0x0C, 0x0F, 0x07, 0x07, 0x05, 0x05, 
	0x02, 0x83, 0x01, 0x10, 0x28, 0x10, 0x00, 0x80, 0x40, 0xA0, 0x2F, 0x4E, 0x5D, 0xBA, 0xBD, 
	0x7A, 0x74, 0x78, 0xF4, 0xE8, 0xF4, 0xE8, 0xF0, 0xE8, 0xD0, 0xE8, 0xD0, 0xE8, 0xD0, 0xE8, 
	0xF0, 0xE8, 0xF4, 0xE8, 0x74, 0x78, 0x74, 0xBA, 0xB5, 0x5A, 0x4D, 0x2E, 0x00, 0x08, 0x00, 
	0x00, 0x00, 0x81, 0x01, 0x01, 0x02, 0x02, 0x02, 0x42, 0x05, 0x05, 0x05, 0x05, 0x25, 0x05, 
	0x05, 0x05, 0x02, 0x02, 0x22, 0x02, 0x81, 0x01, 0x11, 0x10, 0x28, 0xC6, 0x28, 0x10, 0x08, 
	0x40, 0x00, 0x00, 0x01, 0x02, 0x01, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x80, 
	0x40, 0x80, 0x00, 0x04, 0x00, 0x01, 0x00, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 
	0x00, 0x60, 0x60, 0x70, 0x68, 0x70, 0x60, 0x60, 0x62, 0x60, 0x60, 0x60, 0x60, 0x60, 0x68, 
	0x60, 0x60, 0x61, 0x60, 0x60, 0x60, 0x60, 0x60, 0x60, 0x60, 0x60, 0x60, 0x60, 0x60, 0x61, 
	0x60, 0x60, 0x60, 0x00, 0x00, 0x00, 0xF0, 0x00, 0x00, 0x00, 0x00, 0xF0, 0x50, 0x50, 0x50, 
	0x00, 0xF0, 0x00, 0x00, 0x00, 0xF0, 0x00, 0xF0, 0x50, 0x50, 0x50, 0x00, 0xF0, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x02, 0x02, 0x02, 0x00, 0x03, 0x02, 
	0x02, 0x02, 0x00, 0x00, 0x01, 0x02, 0x01, 0x00, 0x00, 0x03, 0x02, 0x02, 0x02, 0x00, 0x03, 
	0x02, 0x02, 0x02, 0x00, 0x00, 0x00, 0x00, 
};

static const uint8_t cumsum_inds[] = {
	0b00011001, 0b10000100, 0b11101011, 0b01001101, 0b11101001, 0b00100010, 0b00001010, 0b00110000, 0b10000100, 0b10000010, 0b00011010, 0b01000110, 0b01011000, 0b00011000, 0b10000101, 
	0b10010101, 0b11011110, 0b10110011, 0b00100000, 0b01001001, 0b00101010, 0b00000000, 
};

static const  uint8_t change_inds[] = {
	0b00000111, 0b10100000, 0b01011101, 0b01000000, 0b00100000, 0b00011000, 0b00010000, 0b11111110, 0b10010010, 0b01101011, 0b00000000, 0b11011101, 0b01000000, 0b00110000, 0b11101000, 
	0b11111000, 0b01111110, 0b01010111, 0b00101100, 0b00010110, 0b01001110, 0b00100111, 0b00100011, 0b10011011, 0b00010101, 0b11001000, 0b11100101, 0b01110011, 0b00000000, 0b10000000, 
	0b01100000, 0b01000001, 0b11110000, 0b11111100, 0b10101110, 0b01011000, 0b00101100, 0b10011100, 0b01001110, 0b01000111, 0b00110100, 0b01001010, 0b00101001, 0b00010110, 0b10001100, 
	0b01000110, 0b10100011, 0b10010001, 0b11101010, 0b10000101, 0b01001010, 0b10101001, 0b11001010, 0b01110001, 0b00111001, 0b00011100, 0b11010001, 0b00101000, 0b10100100, 0b01011010, 
	0b00110001, 0b00011010, 0b10001110, 0b01000111, 0b10101001, 0b10010100, 0b11101010, 0b10000101, 0b01001010, 0b10101101, 0b10001000, 0b11000101, 0b01100011, 0b00110001, 0b11010001, 
	0b01001000, 0b10110101, 0b00110010, 0b10011101, 0b01010000, 0b10101001, 0b01010101, 0b00101010, 0b11011000, 0b10001100, 0b01010110, 0b00110011, 0b00011101, 0b10101100, 0b11100101, 
	0b10001110, 0b00110001, 0b00011000, 0b10101100, 0b01100110, 0b00111011, 0b01101001, 0b10111010, 0b11100100, 0b01110010, 0b10111001, 0b10011000, 0b10001100, 0b01010110, 0b00111100, 
	0b01110000, 0b00111010, 0b10000011, 0b01101101, 0b10110111, 0b00011011, 0b10101101, 0b11100110, 0b11111100, 0b01101001, 0b10110110, 0b11011100, 0b01101110, 0b10110111, 0b10011011, 
	0b11101000, 0b00110110, 0b11010011, 0b01110110, 0b00001111, 0b00001101, 0b01001100, 0b10100110, 0b10010011, 0b01110000, 0b11010100, 0b11010011, 0b10000101, 0b10110000, 0b11110101, 
	0b10000011, 0b10000101, 0b00011101, 0b11001110, 0b11110111, 0b10000011, 0b11000101, 0b11100101, 0b00001111, 0b10001000, 0b01000100, 0b01010011, 0b01001101, 0b10000111, 0b00001010, 
	0b00000101, 0b00110010, 0b10011010, 0b01001101, 0b10111101, 0b01000001, 0b11100001, 0b01000000, 0b11101010, 0b00000101, 0b10010110, 0b11010110, 0b01101101, 0b00110111, 0b01011101, 
	0b11001110, 0b11110111, 0b10000011, 0b11000101, 0b11100101, 0b00001111, 0b10001000, 0b01000100, 0b01000001, 0b11101000, 0b11000110, 0b10110011, 0b01101001, 0b10111010, 0b11100001, 
	0b00001010, 0b00000111, 0b01010001, 0b10001100, 0b10110000, 0b00010000, 0b00001100, 0b00001000, 0b00010100, 0b01000110, 0b00100000, 0b11010011, 0b00001001, 0b10010100, 0b11010010, 
	0b11001001, 0b01100110, 0b10110100, 0b01011010, 0b10101101, 0b10010110, 0b11101011, 0b10000110, 0b01101011, 0b00111001, 0b10011110, 0b11010000, 0b01110000, 0b00111000, 0b01100001, 
	0b10100000, 0b00100000, 0b00011000, 0b00010001, 0b00110000, 0b10011001, 0b01001101, 0b00101100, 0b11010110, 0b10001011, 0b01010101, 0b10110010, 0b11011101, 0b01110000, 0b11001010, 
	0b01100101, 0b10110011, 0b00011001, 0b10101100, 0b11100111, 0b00000011, 0b10100001, 0b11010010, 0b11101010, 0b01110101, 0b11000011, 0b01000010, 0b10001000, 0b00110101, 0b10010011, 
	0b00101001, 0b10010110, 0b11001100, 0b01100110, 0b10110011, 0b10011001, 0b11101101, 0b00000111, 0b00111011, 0b10100001, 0b11010010, 0b11101010, 0b01110101, 0b10000101, 0b00010001, 
	0b10001101, 0b00000111, 0b00110011, 0b10011101, 0b11010000, 0b11101001, 0b01110101, 0b00111010, 0b11100000, 0b10110001, 0b10100011, 0b11111010, 0b01001001, 0b10100000, 0b11100110, 
	0b01110100, 0b01000001, 0b01001111, 0b11101001, 0b00100111, 0b01111011, 0b11000001, 0b11100010, 0b11110101, 0b10001000, 0b01000110, 0b10001111, 0b11101111, 0b00110000, 0b10100010, 
	0b00110001, 0b10110000, 0b11101111, 0b01111000, 0b00111100, 0b01011110, 0b01101111, 0b01011000, 0b10000000, 0b01010001, 0b00011000, 0b11010110, 0b01101101, 0b00110111, 0b01000001, 
	0b11101000, 0b00010100, 0b10010011, 0b01011001, 0b10110000, 0b11011010, 0b01101110, 0b11000110, 0b10000000, 
};

static const char PROGMEM change_vals[] = {
	0xC4, 0xA4, 0x00, 0x0B, 0x45, 0x03, 0x20, 0x27, 0x02, 0x05, 0x10, 0x45, 0x0B, 0x80, 0x40, 
	0xF0, 0xF8, 0xFD, 0x99, 0xCE, 0x87, 0x01, 0x00, 0x01, 0x00, 0x4B, 0xA5, 0x43, 0x00, 0x00, 
	0xE0, 0xF0, 0xF9, 0xF1, 0xFA, 0x9B, 0x83, 0xC4, 0xF4, 0x7D, 0x1F, 0x0F, 0x0F, 0xFE, 0xEF, 
	0xF7, 0x00, 0x81, 0xC2, 0x83, 0x03, 0x84, 0xC4, 0x45, 0x05, 0x0E, 0x0C, 0xF4, 0xF8, 0xFC, 
	0xFE, 0xE9, 0x38, 0x3F, 0x3F, 0x07, 0x04, 0x04, 0x74, 0x78, 0xF4, 0xE8, 0xF4, 0xE8, 0x30, 
	0x79, 0x31, 0x01, 0x22, 0x01, 0x60, 0x48, 0x91, 0x01, 0x21, 0x01, 0x44, 0x01, 0x02, 0x01, 
	0x00, 0x81, 0x01, 0x61, 0x8B, 0x80, 0x00, 0x10, 0x38, 0x10, 0x00, 0x64, 0x10, 0x28, 0x44, 
	0x28, 0x10, 0x82, 0x11, 0xC6, 0x60, 0x60, 0x00, 0x10, 0x00, 0x68, 0x00, 0x00, 0x01, 0x00, 
	0x62, 0x80, 0x80, 0x40, 0x20, 0x40, 0x80, 0x61, 0x62, 0x61, 0x10, 0x81, 0x40, 0xA0, 0x10, 
	0x28, 0x10, 0x01, 0xC0, 0x90, 0x0B, 0xA4, 0x02, 0x02, 0x01, 0x44, 0x00, 0x80, 0x40, 0x80, 
	0x00, 0x60, 0x61, 0x60, 0xC4, 0x05, 0x22, 0x11, 0xC6, 0x00, 0x80, 0x8B, 0x45, 0x42, 0x0B, 
	0x45, 0x03, 0x90, 0x05, 0x80, 0x81, 0x50, 0x68, 0xF0, 0xF8, 0xF8, 0xEC, 0xF6, 0xEB, 0x75, 
	0x1D, 0x0D, 0x07, 0x27, 0x00, 0x40, 0x60, 0x4B, 0xA5, 0x43, 0x01, 0x10, 0x28, 0xE8, 0xF0, 
	0xE8, 0xF4, 0xE8, 0x74, 0x82, 0xE2, 0x75, 0x3D, 0x0F, 0x08, 0x1C, 0x07, 0x13, 0x01, 0x68, 
	0x80, 0x82, 0xD0, 0x02, 0x42, 0x05, 0x05, 0x05, 0x05, 0x25, 0x60, 0x38, 0x1C, 0x1C, 0x02, 
	0x90, 0x45, 0x05, 0x41, 0x00, 0x80, 0x00, 0x10, 0x00, 0x61, 0x60, 0x00, 0x07, 0x25, 0x01, 
	0x00, 0x60, 0x20, 0x27, 0x00, 0x80, 0x00, 0x00, 0x60, 0x64, 0x00, 0x00, 0x80, 0x05, 0x01, 
	0x80, 0x40, 0x80, 0x04, 0x01, 0x61, 0x90, 0x45, 0x02, 0x01, 0x44, 0xC0, 0xA0, 0x07, 0x22, 
	0x81, 0x11, 0xC6, 0x60, 
};

static uint16_t get_num(const uint8_t* arr, int bitsize, int index){
	int arr_index = ((bitsize*index)/ANI_BYTE_SIZE);
	int byte_index = 7-(((bitsize*index) % ANI_BYTE_SIZE));
	uint16_t res = 0;
	for(int i = bitsize-1;i >= 0; i--){
		COPY_BIT(res, i, arr[arr_index], byte_index);
		byte_index--;
		if(byte_index < 0){
			byte_index = 7;
			arr_index++;
		}
	}
	return res;
}

uint16_t index_start = 0;
uint16_t index_end = 0;

static void change_frame_bytewise(uint8_t frame_number){
	index_start = frame_number == 0 ? 0 : index_end;
	index_end = index_start + get_num(cumsum_inds, 5, frame_number);
	if (index_start != index_end){
		for (uint16_t i=index_start; i < index_end; i++){
			oled_write_raw_byte(pgm_read_byte(change_vals + i), get_num(change_inds, 9, i));
		}
	}
}
